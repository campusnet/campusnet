module.exports = {


  friendlyName: 'Signup',


  description: 'Sign up for a new user account.',


  extendedDescription:
  'This creates a new user record in the database _and_ causes the requesting user agent '+
  'to become logged in by modifying its [session](https://sailsjs.com/documentation/concepts/sessions).',


  inputs: {

    emailAddress: {
      required: true,
      type: 'string',
      description: 'The email address for the new account, e.g. "m@example.com".',
      extendedDescription: 'Must be a valid email address.',
    },

    username: {
      required: true,
      type: 'string',
      description: 'The username for the new account, e.g. "mikermcneil".',
      extendedDescription:
      'See `api/models/User.js` for details about username validation.\n'+
      '\n'+
      '>To summarize: Username may only contain alphanumeric characters or single dashes (AND WE MEAN SINGLE!  '+
      'No `i------like---ice--cream`.), and cannot begin or end with a dash.  Usernames will always be lowercased.  '+
      'Also, usernames are checked against a blacklist. The words in `constants/username-blacklist.js` are reserved, '+
      'and cannot be used as usernames.',
    },

    password: {
      required: true,
      type: 'string',
      description: 'The unencrypted password to use for the new account, e.g. "passwordlol".',
      extendedDescription:
      'See `api/models/User.js` for details about password validation.\n'+
      '\n'+
      '> To summarize: Password must be at least 7 characters, and max 72 characters.  Anything goes.',
    }

  },


  exits: {

    <% if (verbose) {%>success: {
      description: 'The new user record was created in the database, and the requesting user agent '+
      'has been logged in.'
    },

    <% } %>invalid: {
      statusCode: 400,
      description: 'The provided password, email address, and/or username are invalid.',
      extendedDescription: 'If this request was sent from a graphical user interface, the request '+
      'parameters should have been validated/coerced _before_ they were sent.'
    },

    alreadyInUse: {
      statusCode: 409,
      description: 'The provided email address or username is already in use.',
    },

  },


  fn: function (inputs, exits, env) {

    // Import dependencies
    var stdlib = require('sails-stdlib');<% if (verbose) {%>

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // NOTE: Rather than waiting until we attempt the `.create()` below, we might instead opt
    // to perform additional, strict validations on incoming request parameters up here.
    // For example:
    // ```
    // try {
    //   sails.helpers.validateUserPassword({ string: inputs.password, strict: true }).execSync();
    // } catch (e) {
    //   switch (e.exit) {
    //     case undefined:
    //     case 'error':
    //       return exits.error(new Error('Consistency violation: Unexpected internal error (i.e. bug in our code) when validating the password provided during signup.  Details: '+e.stack));
    //     case 'notAvailable':
    //     case 'inUse':
    //       return exits.alreadyInUse();
    //     default:
    //       return exits.error(new Error('Server-side validation failed for the password provided for new user (`'+inputs.username+'`).  This should NEVER happen in normal use of this app (because it SHOULD have been validated/coerced on the front-end).  So, either there is a bug somewhere (potentially in our front-end code), or this is a deliberate poke at our API from a curious individual.  Details: '+e.stack));
    //   }
    // }
    // ```
    // ^^This is especially useful if you are browserifying certain helpers for reuse in front-end code.
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<% } %>

    //  ╦ ╦╔═╗╔═╗╦ ╦  ┌─┐┌─┐┌─┐┌─┐┬ ┬┌─┐┬─┐┌┬┐
    //  ╠═╣╠═╣╚═╗╠═╣  ├─┘├─┤└─┐└─┐││││ │├┬┘ ││
    //  ╩ ╩╩ ╩╚═╝╩ ╩  ┴  ┴ ┴└─┘└─┘└┴┘└─┘┴└──┴┘
    //  ┌─    ┌─┐ ┬┌─ ┌─┐   ┌─┐┌┐┌┌─┐┬─┐┬ ┬┌─┐┌┬┐  ┌─┐┌─┐┌─┐┌─┐┬ ┬┌─┐┬─┐┌┬┐    ─┐
    //  │───  ├─┤ ├┴┐ ├─┤   ├┤ ││││  ├┬┘└┬┘├─┘ │   ├─┘├─┤└─┐└─┐││││ │├┬┘ ││  ───│
    //  └─    ┴ ┴o┴ ┴o┴ ┴o  └─┘┘└┘└─┘┴└─ ┴ ┴   ┴   ┴  ┴ ┴└─┘└─┘└┴┘└─┘┴└──┴┘    ─┘
    stdlib('passwords').encryptPassword({
      password: inputs.password
    }).exec(function (err, hashed) {
      <% if (verbose) { %>if(err) {
        return exits.error(new Error('Cannot hash/encrypt password.  Details: '+err.stack));
      }<% } else { %>if(err) { return exits.error(err); }<% } %>

      //  ╔═╗╦═╗╔═╗╔═╗╔╦╗╔═╗  ┬ ┬┌─┐┌─┐┬─┐
      //  ║  ╠╦╝║╣ ╠═╣ ║ ║╣   │ │└─┐├┤ ├┬┘
      //  ╚═╝╩╚═╚═╝╩ ╩ ╩ ╚═╝  └─┘└─┘└─┘┴└─
      // Build up data for the new user record and attempt to save it to the database.
      // (Also use `fetch` to retrieve the new ID so that we can use it below.)
      User.create({
        emailAddress: inputs.emailAddress,
        username: inputs.username,
        password: hashed
      })
      .meta({ fetch: true })
      .exec(function (err, newUserRecord) {
        if (err) {

          //  ╔╗╔╔═╗╔═╗╔═╗╔╦╗╦╔═╗╔╦╗╔═╗  ┌─┐┬─┐┬─┐┌─┐┬─┐
          //  ║║║║╣ ║ ╦║ ║ ║ ║╠═╣ ║ ║╣   ├┤ ├┬┘├┬┘│ │├┬┘
          //  ╝╚╝╚═╝╚═╝╚═╝ ╩ ╩╩ ╩ ╩ ╚═╝  └─┘┴└─┴└─└─┘┴└─
          // Inspect the error and figure out how to exit.

          // Handle logical validation failures:<% if (verbose) {%>
          // > Note that, in most cases, this should never happen.  For UX reasons,less-stringent validation
          // > should have ALSO already taken place on the front-end before sending the request.  Generally
          // > speaking, the front-end is where you'll benefit most from any accompanying coercion of data
          // > as well-- e.g. trimming whitespace.  So either (A) there is a bug somewhere, potentially in
          // > the front-end code, or (B) this is a deliberate poke (with incorrect parameters) directly
          // > at the server-side API.<% } %>
          if (err.name === 'UsageError') {
            return exits.invalid(err);
          }
          // Handle uniqueness constraint violations:
          else if (err.name === 'AdapterError' && err.code === 'E_UNIQUE') {
            return exits.alreadyInUse(err);
          }
          // Handle miscellaneous errors:<% if (verbose) {%>
          // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
          // NOTE: Rather than the simple `else` below, you could also get fancier with it.
          // For example:
          // ```
          // else if (err.name === 'AdapterError') {
          //   return exits.error(new Error(
          //     'Consistency violation: An unexpected adapter error occurred creating a new user '+
          //     'record in the database while this user (`'+inputs.emailAddress+'`) was signing '+
          //     'up.  Details: '+e.stack
          //   ));
          // }
          // else {
          //   return exits.error(new Error(
          //     'Consistency violation: Unexpected internal error (i.e. bug in our code) when '+
          //     'validating the request params provided during signup.  Details: '+e.stack
          //   ));
          // }
          // ```
          // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<% } %>
          else {
            return exits.error(err);
          }

        }

        // --•
        // IWMIH (if we made it here), the user record was successfully created.

        //  ╦  ╔═╗╔═╗╦╔╗╔  ┬ ┬┌─┐┌─┐┬─┐
        //  ║  ║ ║║ ╦║║║║  │ │└─┐├┤ ├┬┘
        //  ╩═╝╚═╝╚═╝╩╝╚╝  └─┘└─┘└─┘┴└─
        // Store the user's new id in their session.<% if (verbose) {%>
        // > We can use this (`req.session.userId`) to authenticate this user's future
        // > requests-- i.e. to tell that they came from from a "logged in" user, and
        // > from _this_ user, in particular.  (That'll work until their session expires
        // > or they clear their cookies.)<% }%>
        env.req.session.userId = newUserRecord.id;

        //  ╔═╗╔═╗╔╗╔╔╦╗  ┬─┐┌─┐┌─┐┌─┐┌─┐┌┐┌┌─┐┌─┐
        //  ╚═╗║╣ ║║║ ║║  ├┬┘├┤ └─┐├─┘│ ││││└─┐├┤
        //  ╚═╝╚═╝╝╚╝═╩╝  ┴└─└─┘└─┘┴  └─┘┘└┘└─┘└─┘
        // Since everything went ok, call the success exit.
        return exits.success();

      }); // </ User.create().exec() >

    }); // </ stdlib('passwords').encryptPassword().exec() >

  }

};
